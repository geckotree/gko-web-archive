{
  "name": "grunt-css-mqpacker",
  "description": "Pack same media query rules into one media query rule using CSS MQPacker.",
  "version": "0.1.5",
  "homepage": "https://github.com/hail2u/grunt-css-mqpacker",
  "author": {
    "name": "Kyo Nagashima",
    "email": "kyo@hail2u.net",
    "url": "http:/hail2u.net/"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/hail2u/grunt-css-mqpacker.git"
  },
  "bugs": {
    "url": "https://github.com/hail2u/grunt-css-mqpacker/issues"
  },
  "licenses": "MIT",
  "main": "Gruntfile.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "devDependencies": {
    "grunt-contrib-jshint": "^0.10.0",
    "grunt-contrib-clean": "^0.4.0",
    "grunt-contrib-nodeunit": "^0.4.1",
    "grunt": "^0.4.5"
  },
  "keywords": [
    "gruntplugin",
    "css",
    "optimization",
    "mediaquery",
    "media",
    "query",
    "sourcemap",
    "source",
    "map",
    "postcss"
  ],
  "dependencies": {
    "css-mqpacker": "^0.1.3",
    "async": "^0.9.0"
  },
  "readme": "# grunt-css-mqpacker\n\n> Pack same media query rules into one media query rule using CSS MQPacker.\n\n\n## Getting Started\n\nThis plugin requires Grunt `~0.4.2`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-css-mqpacker --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-css-mqpacker');\n```\n\n\n## The \"css_mqpacker\" task\n\n\n### Overview\n\nIn your project's Gruntfile, add a section named `css_mqpacker` to the data object passed into `grunt.initConfig()`.\n\n```js\ngrunt.initConfig({\n  css_mqpacker: {\n    options: {\n      map: true\n    },\n    main: {\n      expand: true,\n      cwd: 'src/css/',\n      src: '*.css',\n      dest: 'dest/css/'\n    }\n  },\n});\n```\n\n\n### Options\n\nThe options are the same as second argument of [PostCSS](https://github.com/ai/postcss)'s `process()`. With this options, you can update a existing Source Map file. For more information, please read the PostCSS document.\n\n#### options.map\n\nYou can set `options.map` same as PostCSS's `process()` (e.g. `true`, `false` and Source Map content). Additionally, you can update an existent Source Map file by specifing its path.\n\n```js\ngrunt.initConfig({\n  css_mqpacker: {\n    options: {\n      map: 'src/css/style.css.map'\n    },\n    main: {\n      src: 'src/css/style.css',\n      dest: 'dest/css/style.css'\n    }\n  },\n});\n```\n\n\n## Contributing\n\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n",
  "readmeFilename": "README.md",
  "_id": "grunt-css-mqpacker@0.1.5",
  "_from": "grunt-css-mqpacker@~0.1.3"
}
