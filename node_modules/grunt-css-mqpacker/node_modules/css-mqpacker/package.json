{
  "name": "css-mqpacker",
  "description": "Pack same CSS media query rules into one media query rule.",
  "version": "0.1.4",
  "main": "index.js",
  "scripts": {
    "test": "nodeunit test"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/hail2u/node-css-mqpacker"
  },
  "keywords": [
    "css",
    "optimization",
    "mediaquery",
    "media",
    "query",
    "postcss"
  ],
  "author": {
    "name": "Kyo Nagashima",
    "email": "kyo@hail2u.net",
    "url": "http://hail2u.net/"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/hail2u/node-css-mqpacker/issues"
  },
  "homepage": "https://github.com/hail2u/node-css-mqpacker",
  "dependencies": {
    "postcss": "^1.0.0"
  },
  "devDependencies": {
    "nodeunit": "^0.9.0"
  },
  "readme": "CSS MQPacker\n============\n\nPack same CSS media query rules into one media query rule.\n\nWritten with [PostCSS][1].\n\n\nINSTALLATION\n------------\n\n    $ npm install css-mqpacker\n\nOr install as [Grunt plugin][2].\n\n\nQUICK USAGE\n-----------\n\nRead `from.css`, process its content, and output processed CSS to STDOUT.\n\n```js\n#!/usr/bin/env node\n\n'use strict';\n\nvar fs = require('fs');\nvar mqpacker = require('css-mqpacker');\n\nvar original = fs.readFileSync('from.css', 'utf8');\nvar processed = mqpacker.pack(original, {\n  from: 'from.css',\n  to: 'to.css',\n  map: true\n});\nconsole.log(processed.css);\n```\n\nIf `test.css` has:\n\n```css\n@charset \"UTF-8\";\n\n.foo::before {\n  content: \"foo on small\";\n}\n\n@media screen and (min-width: 769px) {\n  .foo::before {\n    content: \"foo on medium\";\n  }\n}\n\n.bar::before {\n  content: \"bar on small\";\n}\n\n@media screen and (min-width: 769px) {\n  .bar::before {\n    content: \"bar on medium\";\n  }\n}\n```\n\nYou will get following output:\n\n```css\n@charset \"UTF-8\";\n\n.foo::before {\n  content: \"foo on small\";\n}\n\n.bar::before {\n  content: \"bar on small\";\n}\n\n@media screen and (min-width: 769px) {\n  .foo::before {\n    content: \"foo on medium\";\n  }\n  .bar::before {\n    content: \"bar on medium\";\n  }\n}\n\n/*# sourceMappingURL=to.css.map */\n```\n\nSweet!\n\n\nAPI\n---\n\n### pack(css, [options])\n\nPacks media queries in `css`.\n\nThe second argument is optional. The `options` is same as the second argument of\nPostCSS's `process()` method. This is useful for generating Source Map.\n\n```javascript\nvar fs = require('fs');\nvar mqpacker = require('mqpacker');\n\nvar css = fs.readFileSync('from.css', 'utf8');\nvar result = mqpakcer.pack(css, {\n  from: 'from.css',\n  to: 'to.css',\n  map: true\n});\nfs.writeFileSync('to.css', result.css);\nfs.writeFileSync('to.css.map', result.map);\n```\n\nSee also [PostCSS document][3] for more about `options`.\n\n\n### processor\n\nReturns [PostCSS processor][4].\n\nYou can use this property for combining with other PostCSS processors such as\n[Autoprefixer][5].\n\n```javascript\nvar autoprefixer = require('autoprefixer');\nvar mqpacker = require('mqpacker');\nvar postcss = require('postcss');\n\nvar css = fs.readFileSync('test.css', 'utf8');\npostcss().use(\n  autoprefixer.postcss\n).use(\n  mqpakcer.processor\n).process(css);\n```\n\n\nLICENSE\n-------\n\nMIT: http://hail2u.mit-license.org/2014\n\n\n[1]: https://github.com/ai/postcss\n[2]: https://github.com/hail2u/grunt-css-mqpacker\n[3]: https://github.com/ai/postcss#source-map-1\n[4]: https://github.com/ai/postcss#processor\n[5]: https://github.com/ai/autoprefixer\n",
  "readmeFilename": "README.md",
  "_id": "css-mqpacker@0.1.4",
  "_from": "css-mqpacker@^0.1.3"
}
